{"version":3,"sources":["webpack://dinosaurs/./src/client/styles/app.scss?9de9","webpack://dinosaurs/./src/client/styles/resets.scss?564b","webpack://dinosaurs/./src/client/index.js","webpack://dinosaurs/./src/client/js/FactSpeciesFactory.js","webpack://dinosaurs/./src/client/js/Model.js","webpack://dinosaurs/./src/client/js/NetworkManager.js","webpack://dinosaurs/./src/client/js/TileFactory.js","webpack://dinosaurs/./src/client/js/ViewController.js","webpack://dinosaurs/webpack/bootstrap","webpack://dinosaurs/webpack/runtime/define property getters","webpack://dinosaurs/webpack/runtime/hasOwnProperty shorthand","webpack://dinosaurs/webpack/runtime/make namespace object","webpack://dinosaurs/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACA6B;AACH;AACwB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sEAAsB;AAC1B;AACA,QAAQ,yEAAyB;AACjC,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;;ACjBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqD;;AAErD;AACA;AACA;AACA,UAAU,yBAAyB;AACnC,UAAU,0BAA0B;AACpC;AACA;AACA,2BAA2B,2CAAO;AAClC;AACA;AACA,eAAe,SAAS;AACxB;;AAEA,yBAAyB,6CAAS;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,cAAc,aAAa,YAAY,cAAc;AACrD;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,cAAc,aAAa,0BAA0B,SAAS;AAC9D;AACA;AACA;AACA,UAAU,eAAe;AACzB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,2BAA2B,aAAa,mBAAmB,KAAK,MAAM,KAAK;AAC3E,4BAA4B,aAAa,yBAAyB,KAAK;AACvE,2BAA2B,aAAa,mBAAmB,KAAK,MAAM,QAAQ;AAC9E;AACA;AACA;AACA,UAAU,eAAe;AACzB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,2BAA2B,aAAa,kBAAkB,KAAK,MAAM,MAAM,GAAG,OAAO;AACrF,4BAA4B,aAAa,yBAAyB,KAAK;AACvE,2BAA2B,aAAa,mBAAmB,KAAK,MAAM,MAAM,GAAG,OAAO;AACtF;AACA;AACA;AACA,UAAU,eAAe;AACzB,WAAW,OAAO;AAClB;AACA;AACA;AACA,+CAA+C,aAAa,OAAO,KAAK;AACxE,cAAc,aAAa,MAAM,UAAU,SAAS,KAAK,MAAM,UAAU;AACzE;;;;;;;;;;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA,OAAO;AACP;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;AC5CD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEuD;;AAEvD;AACA;AACA;AACA,UAAU,mBAAmB;AAC7B;AACA;AACA,4BAA4B,eAAe;AAC3C;;;AAGA,2BAA2B;AAC3B;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,OAAO;AACzB,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK;AACL;;AAEoB;;;;;;;;;;;;;;;;;;;;AC5DpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+C;AACQ;AACd;AACG;;;AAG5C;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,YAAY;AAC3B;AACA,eAAe,YAAY;AAC3B;;AAEA,eAAe,OAAO;AACtB;AACA,eAAe,YAAY;AAC3B;;AAEA,eAAe,iBAAiB;AAChC;AACA,eAAe,eAAe;AAC9B;AACA,wBAAwB;;;;AAIxB;AACA,aAAa,wEAA2B;AACxC;AACA;AACA,6BAA6B,6CAAS;AACtC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0CAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yDAAW,CAAC,uEAAkB;AAC3D;AACA;AACA,gCAAgC,yDAAW,CAAC,uEAAkB;AAC9D;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,W;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;UCjMD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","import './styles/resets.scss'\r\nimport './styles/app.scss'\r\nimport {ViewController} from './js/ViewController'\r\n\r\ndocument.addEventListener('DOMContentLoaded', function(){\r\n    const form          = document.getElementById('dino-compare');\r\n    const grid          = document.getElementById('grid');\r\n    const name          = document.getElementById('name');\r\n    const weight        = document.getElementById('weight');\r\n    const heightFeet    = document.getElementById('feet');\r\n    const heightInches  = document.getElementById('inches');\r\n    const diet          = document.getElementById('diet');\r\n    let button          = document.getElementById('btn');\r\n    ViewController.bindDOM(form,grid,button,name,heightFeet,heightInches,weight,diet);\r\n    button.addEventListener('click', function(){\r\n        ViewController.togglePage();\r\n    });\r\n});\r\n\r\n","/*--------------------------------------------------------\r\nDinosaurs Project - FactSpeciesFactory Module - Udacity Nanodegree\r\nversion: 1.0.0\r\ncreated on: 30/12/20\r\nlast modified: 30/12/20\r\nUpdates:\r\n30/12/20   File Creation\r\nauthor: E. RONDON\r\n----------------------------------------------------------*/\r\n\r\nimport { Dinosaurs, Species, Humans } from \"./Model\";\r\n\r\n/**\r\n* @class Species Fact Factury Function\r\n* @classdesc Factury Function for Species with aggregates facts\r\n* @param {Species|Dinosaurs|Humans} object - the base object for the factory function\r\n* @param {?Species|Dinosaurs|Humans} compareTo - the nullable object for comparaison\r\n*/\r\nfunction FactSpeciesFactory(object, compareTo) {\r\n    if(!(object instanceof Species)){\r\n        throw new Error(\"Can't Factory from an Object which is not instance of Species\");\r\n    }\r\n    /** @type {String[]}*/\r\n    let facts = [];\r\n\r\n    if(object instanceof Dinosaurs){\r\n        facts.push(object.fact)\r\n        if(object.species !== `Pigeon`) {\r\n            facts.push(object.getLocationFact());\r\n            facts.push(object.getEraFact());\r\n            facts.push(object.compareHeight(compareTo));\r\n            facts.push(object.compareWeight(compareTo));\r\n            facts.push(object.compareDiet(compareTo));\r\n        }\r\n    }\r\n\r\n    return Object.assign({}, object, {\r\n      /**\r\n      * @description Method get all the facts available\r\n      * @return {String[]} the facts array\r\n      */\r\n      getFacts: function(){\r\n          return facts;\r\n      },\r\n      /**\r\n      * @description Method to retrieve a random fact\r\n      * @return {String} the resulting fact\r\n      */\r\n      getRandomFact: function(){\r\n        if(facts.length === 0) return undefined;\r\n        if(facts.length === 1) return facts[0];\r\n        const randomIndex = Math.floor(Math.random() * facts.length);\r\n        return facts[randomIndex];\r\n      }\r\n    });\r\n}\r\n\r\n\r\nexport {FactSpeciesFactory}","/*--------------------------------------------------------\r\nDinosaurs Project - Model Module - Udacity Nanodegree\r\nversion: 1.0.0\r\ncreated on: 30/12/20\r\nlast modified: 30/12/20\r\nUpdates:\r\n30/12/20   File Creation\r\nauthor: E. RONDON\r\n----------------------------------------------------------*/\r\n\r\n/**\r\n* @class Generic Species Class\r\n* @classdesc Class representing an Species \r\n* @param {String} species - the name of the Species\r\n* @param {Number} weight - the mean weight of the Species in lbs\r\n* @param {Number} height - the mean height of the species in feet-inches\r\n* @param {String} diet - the diet type of the Species\r\n*/\r\nfunction Species(species,weight,height,diet){\r\n    this.species = species;\r\n    this.weight = weight;\r\n    this.height = height;\r\n    this.diet = diet;\r\n}\r\n\r\n/**\r\n* @class Generic Human Species Class\r\n* @classdesc Class representing the Humans in the web app\r\n* @param {Number} weight - the weight in lbs\r\n* @param {Number} height - the height in feet-inches\r\n* @param {String} diet - the diet type\r\n* @param {String} name - the name of the human\r\n*/\r\nfunction Humans(weight,height,diet,name){\r\n    Species.call(this,'Human',weight,height,diet);\r\n    this.name = name;\r\n}\r\nHumans.prototype = Object.create(Species.prototype);\r\nHumans.prototype.constructor = Humans;\r\n\r\n/**\r\n* @class Generic Dinosaurs Class\r\n* @classdesc Class representing the Dinosaurs in the wep app\r\n* @param {String} species - the name of the Species\r\n* @param {Number} weight - the mean weight of the Species in lbs\r\n* @param {Number} height - the mean height of the species in feet-inches\r\n* @param {String} diet - the diet type of the Species\r\n* @param {String} where - where Species lived\r\n* @param {String} when - the era when the Species lived\r\n* @param {String} fact - principal fact of the Species\r\n*/\r\nfunction Dinosaurs(species,weight,height,diet,where,when,fact){\r\n    Species.call(this,species,weight,height,diet);\r\n    this.location = where;\r\n    this.era = when;\r\n    this.fact = fact;\r\n}\r\nDinosaurs.prototype = Object.create(Species.prototype);\r\nDinosaurs.prototype.constructor = Dinosaurs;\r\n/**\r\n* @description Method to retrieve the location Fact for Dinosaurs\r\n* @return {String} the string fact\r\n*/\r\nDinosaurs.prototype.getLocationFact = function(){\r\n    return `${this.species} lived in ${this.location}`\r\n}\r\n/**\r\n* @description Method to retrieve the era Fact for Dinosaurs\r\n* @return {String} the string fact\r\n*/\r\nDinosaurs.prototype.getEraFact = function(){\r\n    return `${this.species} was present in the era ${this.era}`\r\n}\r\n/**\r\n* @description Method to compare the weight with a given Human or another Species\r\n* @param {Humans|Species} item - the Espcies or Human object to compare\r\n* @return {String} the string result of the comparaison\r\n*/\r\nDinosaurs.prototype.compareWeight = function(item){\r\n    const diff = this.weight - item.weight;\r\n    const name = item instanceof Humans ? item.name  : item.species;\r\n    if(diff > 0) return `${this.species} is heavier than ${name} by ${diff} lbs`;\r\n    if(diff == 0) return `${this.species} have same weight than ${name}`;\r\n    if(diff < 0) return `${this.species} is ligther than ${name} by ${-1*diff} lbs`;\r\n}\r\n/**\r\n* @description Method to compare the height with a given Human or another Species\r\n* @param {Humans|Species} item - the Espcies or Human object to compare\r\n* @return {String} the string result of the comparaison\r\n*/\r\nDinosaurs.prototype.compareHeight = function(item){\r\n\r\n    const diff = this.height - item.height;\r\n    const name = item instanceof Humans ? item.name  : item.species;\r\n\r\n    const feets = Math.floor(diff/1);\r\n    const inches = Math.floor((diff % 1)/0.0833333);\r\n\r\n    if(diff > 0) return `${this.species} is bigger than ${name} by ${feets}'${inches} feet`;\r\n    if(diff == 0) return `${this.species} have same height than ${name}`;\r\n    if(diff < 0) return `${this.species} is smaller than ${name} by ${feets}'${inches} feet`;\r\n}\r\n/**\r\n* @description Method to compare the diet with a given Human or another Species\r\n* @param {Humans|Species} item - the Espcies or Human object to compare\r\n* @return {String} the string result of the comparaison\r\n*/\r\nDinosaurs.prototype.compareDiet = function(item){\r\n    const name = item instanceof Humans ? item.name  : item.species;\r\n    if(this.diet === item.diet) return `Both ${this.species} and ${name} have same diet`\r\n    return `${this.species} is ${this.diet} while ${name} is ${item.diet}`\r\n}\r\n\r\nexport { Species,Dinosaurs,Humans }","/*--------------------------------------------------------\r\nDinosaurs Project - NetworkManager Module - Udacity Nanodegree\r\nversion: 1.0.0\r\ncreated on: 30/12/20\r\nlast modified: 30/12/20\r\nUpdates:\r\n30/12/20   File Creation\r\nauthor: E. RONDON\r\n----------------------------------------------------------*/\r\n\r\n//Improvement of the NetworkManager Module from FrontEnd Nanodegree CAPSTONE project realized before, with the Module Pattern\r\n\r\n\r\n/**\r\n* @class NetworkManager\r\n* @classdesc Module handling the network request to the server to fetch the data needed for the Web App\r\n*/\r\nvar NetworkManager = (function () {\r\n    const getDinosaursPath = '/dinosaurs';\r\n  \r\n    return {\r\n      /**\r\n      * @description Method to use fetch to realize a GET request\r\n      * @param {String} url - The url to realiaze the GET request.\r\n      * @return {Promise<Object>} a promise containing the JSON object \r\n      */\r\n      getData: async function(url = '') {\r\n          const response = await fetch(url);\r\n          try{\r\n              return response.json();\r\n          }catch(error){\r\n              console.log(\"error: \",error);\r\n              return {};\r\n          }\r\n      \r\n      },\r\n      /**\r\n      * @description Method fetch the Dinosaurs data from server\r\n      * @return {Promise<Object>} a promise containing the JSON object \r\n      */\r\n      getDinosaurs: async function(){\r\n          return this.getData(getDinosaursPath);\r\n      }\r\n    };\r\n})();\r\n\r\nexport {NetworkManager}","/*--------------------------------------------------------\r\nDinosaurs Project - TileFactory Module - Udacity Nanodegree\r\nversion: 1.0.0\r\ncreated on: 30/12/20\r\nlast modified: 30/12/20\r\nUpdates:\r\n30/12/20   File Creation\r\nauthor: E. RONDON\r\n----------------------------------------------------------*/\r\n\r\nimport {FactSpeciesFactory} from './FactSpeciesFactory'\r\n\r\n/**\r\n* @class Tile Factury Function\r\n* @classdesc Factury Function for the creator of tiles in the infographic\r\n* @param {FactSpeciesFactory} object - the base object for the factory function\r\n*/\r\nfunction TileFactory(object){\r\n    const image = `images/${object.species}.png`;\r\n    const name = !!object.name ? object.name : object.species;\r\n    \r\n\r\n    return Object.assign({}, object, {\r\n        /**\r\n        * @description Method get the image\r\n        * @return {String} the image url path\r\n        */\r\n        getImage: function(){\r\n            return image;\r\n        },\r\n        /**\r\n        * @description Method to retrieve the DOM Element of the tile\r\n        * @param {String} fact - the fact to take into account in the infographic\r\n        * @return {HTMLDivElement} the tile element\r\n        */\r\n        createTile: function(fact){\r\n            let tileElement = document.createElement('div');\r\n            tileElement.classList.add('grid-item');\r\n\r\n            let imageElement = document.createElement('img');\r\n            imageElement.setAttribute('src',image);\r\n            imageElement.setAttribute('alt','Species Image');\r\n\r\n            let title = document.createElement('h3');\r\n            title.innerHTML = name;\r\n\r\n            tileElement.appendChild(title);\r\n            tileElement.appendChild(imageElement);\r\n            if(fact!=undefined){\r\n                let factElement = document.createElement('p');\r\n                factElement.innerHTML = fact;\r\n                tileElement.appendChild(factElement);\r\n            }\r\n\r\n            return tileElement;\r\n        }\r\n        \r\n    });\r\n}\r\n\r\nexport {TileFactory}\r\n\r\n","/*--------------------------------------------------------\r\nDinosaurs Project - ViewController Module - Udacity Nanodegree\r\nversion: 1.0.0\r\ncreated on: 30/12/20\r\nlast modified: 30/12/20\r\nUpdates:\r\n30/12/20   File Creation\r\nauthor: E. RONDON\r\n----------------------------------------------------------*/\r\n\r\nimport {NetworkManager} from './NetworkManager'\r\nimport {FactSpeciesFactory} from './FactSpeciesFactory'\r\nimport {TileFactory} from './TileFactory'\r\nimport { Dinosaurs, Humans } from \"./Model\";\r\n\r\n\r\nvar ViewController = (function () {\r\n    /** @type {HTMLElement} */\r\n    let formContainer = null;\r\n    /** @type {HTMLElement} */\r\n    let gridContainer = null;\r\n    /** @type {HTMLElement} */\r\n    let buttonElement = null;\r\n    /** @type {HTMLElement} */\r\n    let nameElement = null;\r\n    /** @type {HTMLElement} */\r\n    let heightFeetElement = null;\r\n    /** @type {HTMLElement} */\r\n    let heightInchesElement = null;\r\n    /** @type {HTMLElement} */\r\n    let weightElement = null;\r\n    /** @type {HTMLElement} */\r\n    let dietElement = null;\r\n\r\n    /** @type {Humans} */\r\n    let human = null;\r\n    /** @type {Dinosaurs[]} */\r\n    let dinosArray = null;\r\n    \r\n    /** @type {HTMLDivElement[]} */\r\n    let dinoTilesArray = [];\r\n    /** @type {HTMLDivElement} */\r\n    let humanTile = null;\r\n    let currentPage = 1; //1=Form, 2=Infographic\r\n\r\n\r\n    \r\n    function loadDinosaurs() {\r\n      return NetworkManager.getDinosaurs().then(data =>{\r\n        dinosArray = [];\r\n        for(const item of data){\r\n            const dino = new Dinosaurs(item.species,item.weight,item.height,item.diet,item.where,item.when,item.fact);\r\n            dinosArray.push(dino);\r\n        }\r\n        return showInfographic();\r\n      });\r\n    }\r\n    function validateFormData(){\r\n        let errorString = 'The entry data presents the following errors:';\r\n        let isError = false;\r\n\r\n        if(!nameElement.value){\r\n            errorString = errorString + '\\nThe Name input is empty';\r\n            isError = true;\r\n        }\r\n\r\n        if(!weightElement.value){\r\n            errorString = errorString + '\\nThe Weight input is empty or null';\r\n            isError = true;\r\n        }else if(parseFloat(weightElement.value) === NaN){\r\n            errorString = errorString + '\\nThe Weight input is wrongly filled';\r\n            isError = true;\r\n        }else if(parseFloat(weightElement.value) === 0){\r\n            errorString = errorString + '\\nThe Weight input is empty or null';\r\n            isError = true;\r\n        }\r\n\r\n        if(!heightFeetElement.value){\r\n            errorString = errorString + '\\nThe Feet input is empty or null';\r\n            isError = true;\r\n        }else if(parseFloat(heightFeetElement.value) === NaN){\r\n            errorString = errorString + '\\nThe Feet input is wrongly filled';\r\n            isError = true;\r\n        }else if(parseFloat(heightFeetElement.value) === 0){\r\n            errorString = errorString + '\\nThe Feet input is empty or null';\r\n            isError = true;\r\n        }\r\n\r\n        if(!heightInchesElement.value){\r\n            errorString = errorString + '\\nThe Inches input is empty or null';\r\n            isError = true;\r\n        }else if(parseFloat(heightInchesElement.value) === NaN){\r\n            errorString = errorString + '\\nThe Inches input is wrongly filled';\r\n            isError = true;\r\n        }else if(parseFloat(heightInchesElement.value) === 0){\r\n            errorString = errorString + '\\nThe Inches input is empty or null';\r\n            isError = true;\r\n        }\r\n\r\n        if(!dietElement.value){\r\n            errorString = errorString + '\\nThe Diet input is empty';\r\n            isError = true;\r\n        }\r\n\r\n        if(isError){\r\n            alert(errorString);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    function loadHuman(){\r\n        const height = parseFloat(heightFeetElement.value) + (0.0833333*parseFloat(heightInchesElement.value));\r\n        human = new Humans(parseFloat(weightElement.value),height,dietElement.value,nameElement.value);\r\n    }\r\n    function clearInfographic(){\r\n        gridContainer.innerHTML = '';\r\n        dinoTilesArray = [];\r\n        human = null;\r\n        humanTile=null;\r\n    }\r\n    function clearForm(){\r\n        nameElement.value = '';\r\n        heightFeetElement.value = '';\r\n        heightInchesElement.value = '';\r\n        weightElement.value = '';\r\n        dietElement.selectedIndex = -1;\r\n    }\r\n    function createTiles(){\r\n        const humanFactory = TileFactory(FactSpeciesFactory(human,null));\r\n        humanTile = humanFactory.createTile(humanFactory.getRandomFact());\r\n        for(const dino of dinosArray){\r\n            const dinoFactory = TileFactory(FactSpeciesFactory(dino,human));\r\n            dinoTilesArray.push(dinoFactory.createTile(dinoFactory.getRandomFact()));\r\n        }\r\n        console.log(dinoTilesArray);\r\n    }\r\n    function addTiles(){\r\n        for(let index=0;index<9;index++){\r\n            if(index==4){\r\n                gridContainer.appendChild(humanTile);\r\n            }else{\r\n                const randomIndex = Math.floor(Math.random() * dinoTilesArray.length);\r\n                gridContainer.appendChild(dinoTilesArray[randomIndex]);\r\n                dinoTilesArray.splice(randomIndex,1);\r\n                console.log(dinoTilesArray);\r\n            }\r\n        }\r\n    }\r\n  \r\n    function showForm() {\r\n        clearInfographic();\r\n        gridContainer.classList.add('hidden-item');\r\n        formContainer.classList.remove('hidden-item');\r\n    }\r\n    function showInfographic() {\r\n        if(dinosArray==null){\r\n            return loadDinosaurs();\r\n        }\r\n        loadHuman();\r\n        clearForm();\r\n        createTiles();\r\n        addTiles();\r\n        formContainer.classList.add('hidden-item');\r\n        gridContainer.classList.remove('hidden-item');\r\n    }\r\n    function bindDOM(form,grid,button,name,heightFeet,heightInches,weight,diet){\r\n        formContainer = form;\r\n        gridContainer = grid;\r\n        buttonElement = button;\r\n        nameElement = name;\r\n        heightFeetElement = heightFeet;\r\n        heightInchesElement = heightInches;\r\n        weightElement = weight;\r\n        dietElement = diet;\r\n    }\r\n    function togglePage(){\r\n        if(currentPage==1){\r\n          if(validateFormData()){\r\n            currentPage=2;\r\n            showInfographic();\r\n          }  \r\n        }else if(currentPage==2){\r\n            currentPage=1;\r\n            showForm();\r\n        }\r\n    }\r\n  \r\n    return {\r\n     showForm: showForm,\r\n     showInfographic: showInfographic,\r\n     bindDOM: bindDOM,\r\n     togglePage: togglePage\r\n    };\r\n})();\r\n\r\nexport {ViewController}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/client/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}